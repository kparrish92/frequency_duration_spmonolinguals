xlab("Duration Z-score") + ylab("Log Frequency Z score") +
theme_bw() +
theme(panel.background = element_rect(fill = "grey79"),
legend.position = "bottom") +
xlim(-2, 2) + ylim(-2, 2) +
ggtitle("English Frequency Effect") +
geom_abline(intercept = span$b_Intercept,
slope = span$b_log_freq_z,
color = "azure4", size = 1.5, alpha = .1) +
geom_abline(intercept = fixef(eng_model)[1, 1],
slope =  fixef(eng_model)[2, 1],
color = "darkred", size = 1.5, alpha = .5) +
ggsave(here("slides", "img", "eng.png"))
ggplot(eng_data, aes(x = duration_z,
y = log_freq_z,
color = length_z)) +
geom_point(size = 2, shape = 20) +
scale_colour_gradient(low = "orange", high = muted("orange")) +
xlab("Duration Z-score") + ylab("Log Frequency Z score") +
theme_bw() +
theme(panel.background = element_rect(fill = "grey79"),
legend.position = "bottom") +
xlim(-2, 2) + ylim(-2, 2) +
ggtitle("English Frequency Effect") +
geom_abline(intercept = span$b_Intercept,
slope = span$b_log_freq_z,
color = "azure4", size = 1.5, alpha = .05) +
geom_abline(intercept = fixef(eng_model)[1, 1],
slope =  fixef(eng_model)[2, 1],
color = "darkred", size = 1.5, alpha = .5) +
ggsave(here("slides", "img", "eng.png"))
source('~/Documents/GitHub/frequency_duration_spmonolinguals/06_plots.R', echo=TRUE)
ggplot(eng_data, aes(x = duration_z,
y = log_freq_z,
color = length_z)) +
geom_point(size = 2, shape = 20) +
scale_colour_gradient(low = "orange", high = muted("orange")) +
xlab("Duration Z-score") + ylab("Log Frequency Z score") +
theme_bw() +
theme(panel.background = element_rect(fill = "grey79"),
legend.position = "bottom") +
xlim(-2, 2) + ylim(-2, 2) +
ggtitle("English Frequency Effect") +
geom_abline(intercept = span$b_Intercept,
slope = span$b_log_freq_z,
color = "white", size = 1.5, alpha = .05) +
geom_abline(intercept = fixef(eng_model)[1, 1],
slope =  fixef(eng_model)[2, 1],
color = "darkred", size = 1.5, alpha = .5) +
ggsave(here("slides", "img", "eng.png"))
library(here)
library(readr)
library(tidyverse)
library(brms)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
library(bayestestR)
fixef(span_model) %>%
knitr::kable(digits = 3)
source(here::here("scripts", "05_small_data.R"))
source(here::here("scripts", "00_libraries.R"))
source(here::here("scripts", "00_libraries.R"))
source(here::here("scripts", "05_small_data.R"))
library(HDInterval)
source(here::here("scripts", "05_small_data.R"))
span = as.data.frame(span_model) %>%
slice(1:300)
eng = as.data.frame(eng_model) %>%
slice(1:300)
ggplot(eng_data, aes(x = duration_z,
y = log_freq_z,
color = length_z)) +
geom_point(size = 2, shape = 20) +
scale_colour_gradient(low = "orange", high = muted("orange")) +
xlab("Duration Z-score") + ylab("Log Frequency Z score") +
theme_bw() +
theme(panel.background = element_rect(fill = "grey79"),
legend.position = "bottom") +
xlim(-2, 2) + ylim(-2, 2) +
ggtitle("English Frequency Effect") +
geom_abline(intercept = span$b_Intercept,
slope = span$b_log_freq_z,
color = "white", size = 1.5, alpha = .05) +
geom_abline(intercept = fixef(eng_model)[1, 1],
slope =  fixef(eng_model)[2, 1],
color = "darkred", size = 1.5, alpha = .5) +
ggsave(here("slides", "img", "eng.png"))
ggplot(span_data, aes(x = duration_z,
y = log_freq_z,
color = length_z)) +
geom_point(size = 2, shape = 20) +
scale_colour_gradient(low = "cyan", high = muted("cyan")) +
xlab("Duration Z-score") + ylab("Log Frequency Z score") +
theme_bw() +
theme(panel.background = element_rect(fill = "grey79"),
legend.position = "bottom") +
xlim(-2, 2) + ylim(-2, 2) +
ggtitle("Spanish Frequency Effect") +
geom_abline(intercept = span$b_Intercept,
slope = span$b_log_freq_z,
color = "white", size = 1.5, alpha = .1) +
geom_abline(intercept = fixef(span_model)[1, 1],
slope =  fixef(span_model)[2, 1],
color = "darkred", size = 1.5, alpha = .5) +
ggsave(here("slides", "img", "span.png"))
source(here::here("scripts", "05_small_data.R"))
span = as.data.frame(span_model) %>%
slice(1:300)
eng = as.data.frame(eng_model) %>%
slice(1:300)
ggplot(eng_data, aes(x = duration_z,
y = log_freq_z,
color = length_z)) +
geom_point(size = 2, shape = 20) +
scale_colour_gradient(low = "orange", high = muted("orange")) +
xlab("Duration Z-score") + ylab("Log Frequency Z score") +
theme_bw() +
theme(panel.background = element_rect(fill = "grey79"),
legend.position = "bottom") +
xlim(-2, 2) + ylim(-2, 2) +
ggtitle("English Frequency Effect") +
geom_abline(intercept = span$b_Intercept,
slope = span$b_log_freq_z,
color = "white", size = 1.5, alpha = .05) +
geom_abline(intercept = fixef(eng_model)[1, 1],
slope =  fixef(eng_model)[2, 1],
color = "darkred", size = 1.5, alpha = .5) +
ggsave(here("slides", "img", "eng.png"))
ggplot(span_data, aes(x = duration_z,
y = log_freq_z,
color = length_z)) +
geom_point(size = 2, shape = 20) +
scale_colour_gradient(low = "cyan", high = muted("cyan")) +
xlab("Duration Z-score") + ylab("Log Frequency Z score") +
theme_bw() +
theme(panel.background = element_rect(fill = "grey79"),
legend.position = "bottom") +
xlim(-2, 2) + ylim(-2, 2) +
ggtitle("Spanish Frequency Effect") +
geom_abline(intercept = span$b_Intercept,
slope = span$b_log_freq_z,
color = "white", size = 1.5, alpha = .1) +
geom_abline(intercept = fixef(span_model)[1, 1],
slope =  fixef(span_model)[2, 1],
color = "darkred", size = 1.5, alpha = .5) +
ggsave(here("slides", "img", "span.png"))
plot_title_eng <- ggtitle("English Posterior distributions",
"with medians and 80% intervals")
bayesplot::mcmc_areas(eng_post,
pars = c("b"),
prob = 0.8) + geom_vline(xintercept = 0) + xlim(-1, 1)
library(here)
library(readr)
library(tidyverse)
library(brms)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
library(bayestestR)
source(here::here("scripts", "05_small_data.R"))
library(here)
library(tidyverse)
# load needed data
span_data <- read.csv(here("corpus_data", "tidy", "span_tidy.csv"))
eng_data <- read.csv(here("corpus_data", "tidy", "eng_tidy.csv"))
span_model  <- read_rds(here("corpus_data", "models", "span_model_bayes.RDS"))
eng_model <- read_rds(here("corpus_data", "models", "eng_model_bayes.RDS"))
fixef_df_span <- fixef(span_model) %>%
as.data.frame()
fixef_df_eng <- fixef(eng_model) %>%
as.data.frame()
span_model_df <- span_model %>%
as.data.frame()
hdi_span <- hdi(span_model_df$b_log_freq_z)
# calculate range of difference from most to least frequent tokens
low = (fixef(span_model)[2,1]*min(span_data$log_freq, na.rm=TRUE) + fixef(span_model)[1,1])*1000 %>%
as.data.frame()
high = (fixef(span_model)[2,1]*max(span_data$log_freq, na.rm=TRUE) + fixef(span_model)[1,1])*1000 %>%
as.data.frame()
low_e = (fixef(eng_model)[2,1]*min(eng_data$log_freq, na.rm=TRUE) + fixef(eng_model)[1,1])*1000 %>%
as.data.frame()
high_e = (fixef(eng_model)[2,1]*max(eng_data$log_freq, na.rm=TRUE) + fixef(eng_model)[1,1])*1000 %>%
as.data.frame()
low_obs_e <- min(eng_data$log_freq, na.rm=TRUE)
slope_e <- fixef(eng_model)[2,1]
int_e <- fixef(eng_model)[1,1]
low_obs_s <- min(span_model$log_freq, na.rm=TRUE)
slope_s <- fixef(span_model)[2,1]
int_s <- fixef(span_model)[1,1]
# when x = 10.27, y = .559
# what does y equal when x = 0?
# multiple low_obs by slope minus intercept
y_int_e <- (low_obs_e*slope_e)*-1 + int_e
y_int_s <- (slope_s*slope_s)*-1 + int_s
fixef_df_eng <- fixef(eng_model) %>%
as.data.frame()
eng_model_df <- eng_model %>%
as.data.frame()
hdi_eng <- hdi(eng_model_df$b_log_freq)
corpus <- read.csv(here("lexicalfrequencydata", "subtlex_tidy.csv"))
freq <- read.csv(here("eng_corpus_data", "tidy", "unigram_freq.csv")
span_post <- as_tibble(span_model)
as_tibble(span_model)
span_post <- as_tibble(span_model)
data.frame(int = span_post$b_Intercept
log_freq = span_post$b_log_freq_z
rate = span_post$b_rate_z
length = span_post$b_length_z)
data.frame(int = span_post$b_Intercept,
log_freq = span_post$b_log_freq_z,
rate = span_post$b_rate_z,
length = span_post$b_length_z)
span_post_df = data.frame(int = span_post$b_Intercept,
log_freq = span_post$b_log_freq_z,
rate = span_post$b_rate_z,
length = span_post$b_length_z)
posterior <- as.matrix(span_model)
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior,
pars = c("cyl", "drat", "am", "wt"),
prob = 0.8) + plot_title
library("bayesplot")
and 80% intervals")
mcmc_areas(posterior,
pars = c("cyl", "drat", "am", "wt"),
prob = 0.8) + plot_title
1 + 1
mcmc_areas(posterior,
pars = c("cyl", "drat", "am", "wt"),
prob = 0.8) + plot_title
mcmc_areas(posterior,
pars = c("b_log_freq_z", "b_rate_z", "b_length_z"),
prob = 0.8) + plot_title
eng_posterior <- as.matrix(eng_model)
eng_posterior <- as.matrix(eng_model)
plot_title_eng <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(eng_posterior,
pars = c("b_log_freq_z", "b_rate_z", "b_length_z"),
prob = 0.8) + plot_title
mcmc_areas(eng_posterior,
pars = c("b_log_freq_z", "b_rate_z", "b_length_z"),
prob = 0.8) + plot_title + xlim(-.5, .5)
mcmc_areas(span_posterior,
pars = c("b_log_freq_z", "b_rate_z", "b_length_z"),
prob = 0.8) + plot_title + xlim(-.5, .5)
span_posterior <- as.matrix(span_model)
plot_title_span <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(span_posterior,
pars = c("b_log_freq_z", "b_rate_z", "b_length_z"),
prob = 0.8) + plot_title + xlim(-.5, .5)
span_posterior <- as.matrix(span_model)
plot_title_span <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(span_posterior,
pars = c("b_log_freq_z", "b_rate_z", "b_length_z"),
prob = 0.8) + plot_title + xlim(-.7, .7)
eng_posterior <- as.matrix(eng_model)
plot_title_eng <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(eng_posterior,
pars = c("b_log_freq_z", "b_rate_z", "b_length_z"),
prob = 0.8) + plot_title + xlim(-.7, .7)
span_posterior <- as.matrix(span_model)
plot_title_span <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(span_posterior,
pars = c("b_log_freq_z", "b_rate_z", "b_length_z"),
prob = 0.8) + plot_title + xlim(-.7, .7) +
ggsave(here("slides", "img", "span_forest.png"))
eng_posterior <- as.matrix(eng_model)
plot_title_eng <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(eng_posterior,
pars = c("b_log_freq_z", "b_rate_z", "b_length_z"),
prob = 0.8) + plot_title + xlim(-.7, .7) +
ggsave(here("slides", "img", "eng_forest.png"))
source(here::here("scripts", "05_small_data.R"))
span = as.data.frame(span_model) %>%
slice(1:300)
eng = as.data.frame(eng_model) %>%
slice(1:300)
ggplot(eng_data, aes(x = duration_z,
y = log_freq_z,
color = length_z)) +
geom_point(size = 2, shape = 20) +
scale_colour_gradient(low = "orange", high = muted("orange")) +
xlab("Duration Z-score") + ylab("Log Frequency Z score") +
theme_bw() +
theme(panel.background = element_rect(fill = "grey79"),
legend.position = "bottom") +
xlim(-2, 2) + ylim(-2, 2) +
ggtitle("English Frequency Effect") +
geom_abline(intercept = span$b_Intercept,
slope = span$b_log_freq_z,
color = "white", size = 1.5, alpha = .05) +
geom_abline(intercept = fixef(eng_model)[1, 1],
slope =  fixef(eng_model)[2, 1],
color = "darkred", size = 1.5, alpha = .5) +
ggsave(here("slides", "img", "eng.png"))
ggplot(span_data, aes(x = duration_z,
y = log_freq_z,
color = length_z)) +
geom_point(size = 2, shape = 20) +
scale_colour_gradient(low = "cyan", high = muted("cyan")) +
xlab("Duration Z-score") + ylab("Log Frequency Z score") +
theme_bw() +
theme(panel.background = element_rect(fill = "grey79"),
legend.position = "bottom") +
xlim(-2, 2) + ylim(-2, 2) +
ggtitle("Spanish Frequency Effect") +
geom_abline(intercept = span$b_Intercept,
slope = span$b_log_freq_z,
color = "white", size = 1.5, alpha = .1) +
geom_abline(intercept = fixef(span_model)[1, 1],
slope =  fixef(span_model)[2, 1],
color = "darkred", size = 1.5, alpha = .5) +
ggsave(here("slides", "img", "span.png"))
plot_title_eng <- ggtitle("English Posterior distributions",
"with medians and 80% intervals")
bayesplot::mcmc_areas(eng_post,
pars = c("b"),
prob = 0.8) + geom_vline(xintercept = 0) + xlim(-1, 1)
span_post_df = data.frame(int = span_post$b_Intercept,
log_freq = span_post$b_log_freq_z,
rate = span_post$b_rate_z,
length = span_post$b_length_z)
span_posterior <- as.matrix(span_model)
plot_title_span <- ggtitle("Spanish Model Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(span_posterior,
pars = c("b_log_freq_z", "b_rate_z", "b_length_z"),
prob = 0.8) + plot_title + xlim(-.7, .7) +
ggsave(here("slides", "img", "span_forest.png"))
eng_posterior <- as.matrix(eng_model)
plot_title_eng <- ggtitle("English Model Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(eng_posterior,
pars = c("b_log_freq_z", "b_rate_z", "b_length_z"),
prob = 0.8) + plot_title + xlim(-.7, .7) +
ggsave(here("slides", "img", "eng_forest.png"))
plot_title_eng <- ggtitle("English Model Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(eng_posterior,
pars = c("b_log_freq_z", "b_rate_z", "b_length_z"),
prob = 0.8) + plot_title + xlim(-.7, .7) +
ggsave(here("slides", "img", "eng_forest.png"))
source(here::here("scripts", "05_small_data.R"))
span = as.data.frame(span_model) %>%
slice(1:300)
eng = as.data.frame(eng_model) %>%
slice(1:300)
ggplot(eng_data, aes(x = duration_z,
y = log_freq_z,
color = length_z)) +
geom_point(size = 2, shape = 20) +
scale_colour_gradient(low = "orange", high = muted("orange")) +
xlab("Duration Z-score") + ylab("Log Frequency Z score") +
theme_bw() +
theme(panel.background = element_rect(fill = "grey79"),
legend.position = "bottom") +
xlim(-2, 2) + ylim(-2, 2) +
ggtitle("English Frequency Effect") +
geom_abline(intercept = span$b_Intercept,
slope = span$b_log_freq_z,
color = "white", size = 1.5, alpha = .05) +
geom_abline(intercept = fixef(eng_model)[1, 1],
slope =  fixef(eng_model)[2, 1],
color = "darkred", size = 1.5, alpha = .5) +
ggsave(here("slides", "img", "eng.png"))
ggplot(span_data, aes(x = duration_z,
y = log_freq_z,
color = length_z)) +
geom_point(size = 2, shape = 20) +
scale_colour_gradient(low = "cyan", high = muted("cyan")) +
xlab("Duration Z-score") + ylab("Log Frequency Z score") +
theme_bw() +
theme(panel.background = element_rect(fill = "grey79"),
legend.position = "bottom") +
xlim(-2, 2) + ylim(-2, 2) +
ggtitle("Spanish Frequency Effect") +
geom_abline(intercept = span$b_Intercept,
slope = span$b_log_freq_z,
color = "white", size = 1.5, alpha = .1) +
geom_abline(intercept = fixef(span_model)[1, 1],
slope =  fixef(span_model)[2, 1],
color = "darkred", size = 1.5, alpha = .5) +
ggsave(here("slides", "img", "span.png"))
plot_title_eng <- ggtitle("English Posterior distributions",
"with medians and 80% intervals")
bayesplot::mcmc_areas(eng_post,
pars = c("b"),
prob = 0.8) + geom_vline(xintercept = 0) + xlim(-1, 1)
span_post_df = data.frame(int = span_post$b_Intercept,
log_freq = span_post$b_log_freq_z,
rate = span_post$b_rate_z,
length = span_post$b_length_z)
span_posterior <- as.matrix(span_model)
plot_title_span <- ggtitle("Spanish Model Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(span_posterior,
pars = c("b_log_freq_z", "b_rate_z", "b_length_z"),
prob = 0.8) + plot_title_span + xlim(-.7, .7) +
ggsave(here("slides", "img", "span_forest.png"))
eng_posterior <- as.matrix(eng_model)
plot_title_eng <- ggtitle("English Model Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(eng_posterior,
pars = c("b_log_freq_z", "b_rate_z", "b_length_z"),
prob = 0.8) + plot_title_eng + xlim(-.7, .7) +
ggsave(here("slides", "img", "eng_forest.png"))
ggplot(span_data, aes(x = duration_z,
y = log_freq_z,
color = length_z)) +
geom_point(size = 2, shape = 20) +
scale_colour_gradient(low = "cyan", high = muted("cyan")) +
xlab("Duration Z-score") + ylab("Log Frequency Z score") +
theme_bw() +
theme(panel.background = element_rect(fill = "grey79"),
legend.position = "bottom") +
xlim(-2, 2) + ylim(-2, 2) +
ggtitle("Spanish Frequency Effect") +
geom_abline(intercept = span$b_Intercept,
slope = span$b_log_freq_z,
color = "white", size = 1.5, alpha = .1) +
geom_abline(intercept = fixef(span_model)[1, 1],
slope =  fixef(span_model)[2, 1],
color = "darkred", size = 1.5, alpha = .5) +
ggsave(here("slides", "img", "span.png"))
source(here::here("scripts", "05_small_data.R"))
ggplot(span_data, aes(x = duration_z,
y = log_freq_z,
color = length_z)) +
geom_point(size = 2, shape = 20) +
scale_colour_gradient(low = "cyan", high = muted("cyan")) +
xlab("Duration Z-score") + ylab("Log Frequency Z score") +
theme_bw() +
theme(panel.background = element_rect(fill = "grey79"),
legend.position = "bottom") +
xlim(-2, 2) + ylim(-2, 2) +
ggtitle("Spanish Frequency Effect") +
geom_abline(intercept = span$b_Intercept,
slope = span$b_log_freq_z,
color = "white", size = 1.5, alpha = .1) +
geom_abline(intercept = fixef(span_model)[1, 1],
slope =  fixef(span_model)[2, 1],
color = "darkred", size = 1.5, alpha = .5) +
ggsave(here("slides", "img", "span.png"))
ggplot(span_data, aes(x = duration_z,
y = log_freq_z,
color = length_z)) +
geom_point(size = 2, shape = 20) +
scale_colour_gradient(low = "cyan", high = muted("cyan")) +
xlab("Duration Z-score") + ylab("Log Frequency Z score") +
theme_bw() +
theme(panel.background = element_rect(fill = "grey79"),
legend.position = "bottom") +
xlim(-2, 2) + ylim(-2, 2) +
ggtitle("Spanish Frequency Effect") +
geom_abline(intercept = span$b_Intercept,
slope = span$b_log_freq_z,
color = "white", size = 1.5, alpha = .1) +
geom_abline(intercept = fixef(span_model)[1, 1],
slope =  fixef(span_model)[2, 1],
color = "darkred", size = 1.5, alpha = .5) +
ggsave(here("slides", "img", "span.png"))
library(scales)
source(here::here("scripts", "05_small_data.R"))
library(scales)
ggplot(eng_data, aes(x = duration_z,
y = log_freq_z,
color = length_z)) +
geom_point(size = 2, shape = 20) +
scale_colour_gradient(low = "orange", high = muted("orange")) +
xlab("Duration Z-score") + ylab("Log Frequency Z score") +
theme_bw() +
theme(panel.background = element_rect(fill = "grey79"),
legend.position = "bottom") +
xlim(-2, 2) + ylim(-2, 2) +
ggtitle("English Frequency Effect") +
geom_abline(intercept = span$b_Intercept,
slope = span$b_log_freq_z,
color = "white", size = 1.5, alpha = .05) +
geom_abline(intercept = fixef(eng_model)[1, 1],
slope =  fixef(eng_model)[2, 1],
color = "darkred", size = 1.5, alpha = .5) +
ggsave(here("slides", "img", "eng.png"))
ggplot(eng_data, aes(x = duration_z,
y = log_freq_z,
color = length_z)) +
geom_point(size = 2, shape = 20) +
scale_colour_gradient(low = "orange", high = muted("orange")) +
xlab("Duration Z-score") + ylab("Log Frequency Z score") +
theme_bw() +
theme(panel.background = element_rect(fill = "grey79"),
legend.position = "bottom") +
xlim(-2, 2) + ylim(-2, 2) +
ggtitle("English Frequency Effect") +
geom_abline(intercept = span$b_Intercept,
slope = span$b_log_freq_z,
color = "white", size = 1.5, alpha = .05) +
geom_abline(intercept = fixef(eng_model)[1, 1],
slope =  fixef(eng_model)[2, 1],
color = "darkred", size = 1.5, alpha = .5) +
ggsave(here("slides", "img", "eng.png"))
eng_posterior <- as.matrix(eng_model)
plot_title_eng <- ggtitle("English Model Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(eng_posterior,
pars = c("b_log_freq_z", "b_rate_z", "b_length_z"),
prob = 0.8) + plot_title_eng + xlim(-.7, .7) +
ggsave(here("slides", "img", "eng_forest.png"))
View(span_model)
