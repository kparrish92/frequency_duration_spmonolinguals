mutate(year = c(1:30)) %>% =
mutate(source = "1k")
colnames(year)[1] <- "amount"
year2 <- year2 %>%
mutate(year = c(1:30)) %>%
rename(amount = X864) %>%
mutate(source = "800")
colnames(year2)[1] <- "amount"
year3 <- rbind(year, year2)
year3 %>%
ggplot(aes(x = year, y = amount, color = source)) + geom_point() + geom_line() + geom_abline()
roth <- year2$amount[30]
kay <- year$amount[30]*(1-rate_future)
df <- data.frame("roth_ira" = roth, "401" = kay)
view(df)
year3 <- rbind(year, year2)
power <- 30
principle <- 1000
rate <- .2
rate_future <- .2
year <- numeric() %>%
as.data.frame()
year2 <- numeric() %>%
as.data.frame()
for(thisRun in 1:power)
{
year_800 <- (1-rate)*principle*1.08^thisRun
year_1000 <-  principle*1.08^thisRun
year <- rbind(year, year_1000)
year2 <- rbind(year2, year_800)
}
year <- year %>%
mutate(year = c(1:30)) %>%
mutate(source = "1k")
colnames(year)[1] <- "amount"
year2 <- year2 %>%
mutate(year = c(1:30)) %>%
rename(amount = X864) %>%
mutate(source = "800")
colnames(year2)[1] <- "amount"
year3 <- rbind(year, year2)
year3 %>%
ggplot(aes(x = year, y = amount, color = source)) + geom_point() + geom_line() + geom_abline()
roth <- year2$amount[30]
kay <- year$amount[30]*(1-rate_future)
df <- data.frame("roth_ira" = roth, "401" = kay)
view(df)
power <- 30
principle <- 1000
rate <- .25
rate_future <- .2
year <- numeric() %>%
as.data.frame()
year2 <- numeric() %>%
as.data.frame()
for(thisRun in 1:power)
{
year_800 <- (1-rate)*principle*1.08^thisRun
year_1000 <-  principle*1.08^thisRun
year <- rbind(year, year_1000)
year2 <- rbind(year2, year_800)
}
year <- year %>%
mutate(year = c(1:30)) %>%
mutate(source = "1k")
colnames(year)[1] <- "amount"
year2 <- year2 %>%
mutate(year = c(1:30)) %>%
rename(amount = X864) %>%
mutate(source = "800")
colnames(year2)[1] <- "amount"
year3 <- rbind(year, year2)
year3 %>%
ggplot(aes(x = year, y = amount, color = source)) + geom_point() + geom_line() + geom_abline()
roth <- year2$amount[30]
kay <- year$amount[30]*(1-rate_future)
df <- data.frame("roth_ira" = roth, "401" = kay)
view(df)
power <- 30
principle <- 1000
rate <- .2
rate_future <- .25
year <- numeric() %>%
as.data.frame()
year2 <- numeric() %>%
as.data.frame()
for(thisRun in 1:power)
{
year_800 <- (1-rate)*principle*1.08^thisRun
year_1000 <-  principle*1.08^thisRun
year <- rbind(year, year_1000)
year2 <- rbind(year2, year_800)
}
year <- year %>%
mutate(year = c(1:30)) %>%
mutate(source = "1k")
colnames(year)[1] <- "amount"
year2 <- year2 %>%
mutate(year = c(1:30)) %>%
rename(amount = X864) %>%
mutate(source = "800")
colnames(year2)[1] <- "amount"
year3 <- rbind(year, year2)
year3 %>%
ggplot(aes(x = year, y = amount, color = source)) + geom_point() + geom_line() + geom_abline()
roth <- year2$amount[30]
kay <- year$amount[30]*(1-rate_future)
df <- data.frame("roth_ira" = roth, "401" = kay)
view(df)
eng_data %>%
ggplot(., aes(x = log_freq, y = duration, color = length, shape = rate)) +
geom_point(pch = 20) +
geom_abline(intercept = y_int_e, slope = fixef(eng_model)[2, 1],
color = "darkred", size = 1.5) + xlab("Log Frequency") + ylab("Duration (ms)")
power <- 30
principle <- 1000
rate <- .25
rate_future <- .25
year <- numeric() %>%
as.data.frame()
year2 <- numeric() %>%
as.data.frame()
for(thisRun in 1:power)
{
year_800 <- (1-rate)*principle*1.08^thisRun
year_1000 <-  principle*1.08^thisRun
year <- rbind(year, year_1000)
year2 <- rbind(year2, year_800)
}
year <- year %>%
mutate(year = c(1:30)) %>%
mutate(source = "1k")
colnames(year)[1] <- "amount"
year2 <- year2 %>%
mutate(year = c(1:30)) %>%
rename(amount = X864) %>%
mutate(source = "800")
colnames(year2)[1] <- "amount"
year3 <- rbind(year, year2)
year3 %>%
ggplot(aes(x = year, y = amount, color = source)) + geom_point() + geom_line() + geom_abline()
roth <- year2$amount[30]
kay <- year$amount[30]*(1-rate_future)
df <- data.frame("roth_ira" = roth, "401" = kay)
view(df)
(1-rate)*principle
View(year3)
View(year2)
View(year)
roth <- year2$amount[30]
kay <- year$amount[30]*(1-rate_future)
df <- data.frame("roth_ira" = roth, "401" = kay)
view(df)
span_data <- read.csv(here("corpus_data", "tidy", "span_tidy.csv"))
span_model  <- read_rds(here("corpus_data", "models", "span_model_bayes.RDS"))
robustHD::standardize(span_data$log_freq, centerFun = mean, scaleFun = sd)
install.packages("robustHD")
robustHD::standardize(span_data$log_freq, centerFun = mean, scaleFun = sd)
span_data %>%
mutate(zscore = (log_freq - mean(log_freq))/sd(log_freq))
span_data$log_freq <- numeric(span_data$log_freq)
span_data$log_freq <- as.numeric(span_data$log_freq)
span_data %>%
mutate(zscore = (log_freq - mean(log_freq))/sd(log_freq))
mean(span_data$log_freq)
span_data <- read.csv(here("corpus_data", "tidy", "span_tidy.csv")) %>%
filter(!is.na(log_freq))
mean(span_data$log_freq)
span_data %>%
mutate(zscore = (log_freq - mean(log_freq))/sd(log_freq))
span_data_z <- span_data %>%
mutate(zscore = (log_freq - mean(log_freq))/sd(log_freq))
mod <- lmer(duration ~ zscore + rate + length + (1 | word), data = span_data_z)
mod <- lmer(duration ~ zscore + rate + length + (1 | word), data = span_data_z)
fixef(mod)
mod <- lmer(duration ~ zscore + rate + length + (1 | word), data = span_data_z)
summary(mod)
mod <- lmer(duration ~ zscore + rate + length + (1 | word), data = span_data_z)
library(lmerTest)
summary(mod)
library(lmerTest)
mod <- lmer(duration ~ zscore + rate + length + (1 | word), data = span_data_z)
summary(mod)
mod <- lmer(duration ~ zscore + rate + length + (1 | word), data = span_data_z)
summary(mod)
span_data_z <- span_data %>%
mutate(zscore_freq = (log_freq - mean(log_freq))/sd(log_freq)) %>%
mutate(rate_z = (log_freq - mean(rate_z))/sd(rate_z)) %>%
mutate(length_z = (length_z - mean(length_z))/sd(length_z))
span_data_z <- span_data %>%
mutate(zscore_freq = (log_freq - mean(log_freq))/sd(log_freq)) %>%
mutate(rate_z = (log_freq - mean(rate))/sd(rate)) %>%
mutate(length_z = (length_z - mean(length))/sd(length))
span_data_z <- span_data %>%
mutate(zscore_freq = (log_freq - mean(log_freq))/sd(log_freq)) %>%
mutate(rate_z = (log_freq - mean(rate))/sd(rate)) %>%
mutate(length_z = (length - mean(length))/sd(length))
mean(span_data$log_freq)
mod <- lmer(duration ~ zscore_freq + rate_z + length_z + (1 | word), data = span_data_z)
summary(mod)
View(span_data_z)
mod <- lmer(duration ~ zscore_freq + rate_z + length_z + (1 | word), data = span_data_z)
mod <- lmer(duration ~ zscore_freq + rate + length_z + (1 | word), data = span_data_z)
summary(mod)
mod2 <- glm(duration ~ log_freq + duration + length, data = span_data)
summary(mod2)
mod2 <- glm(duration ~ log_freq + rate + length, data = span_data)
summary(mod2)
hist(span_data$duration)
mod2 <- glm(duration ~ log_freq, data = span_data)
summary(mod2)
mod2 <- glm(duration ~ log_freq*rate*length, data = span_data)
summary(mod2)
mod2 <- brm(duration ~ log_freq*rate*length + (1 | word), data = span_data)
marginal_effects(span_model)
fixef(mod2)
marginal_effects(span_model)
df <- fixef(mod2)
View(df)
conditional_effects(span_model)
conditional_effects(mod2)
conditional_effects(mod2)
summary(mod2)
mod2 <- brm(duration ~ log_freq*rate*length + (1 | word), data = span_data)
1 + 1
span_data$word
source('~/.active-rstudio-document', echo=TRUE)
hist(span_data$rate)
hist(span_data$length)
hist(span_data$rate)
span_data %>%
filter(length = "5") %>%
filter(rate < 7 & rate > 8)
span_data %>%
filter(length = "5") %>%
filter(rate < 7 & rate > 8)
1 + 1
span_data %>%
filter(length = "5") %>%
filter(rate < 7 & rate > 8)
span_data %>%
filter(length = "5") %>%
filter(rate < 7)
span_data %>%
filter(length = "5") %>%
filter(rate < 7)
y < -span_data %>%
filter(length = "5") %>%
filter(rate < 7)
y <- span_data %>%
filter(length = "5") %>%
filter(rate < 7)
y <- span_data %>%
filter(length = "5")
y <- span_data %>%
filter(length = "5")
1 + 1
span_data
span_data %>%
filter(length = "5")
y <- span_data %>%
filter(length = 5)
span_data <- read.csv(here("corpus_data", "tidy", "span_tidy.csv")) %>%
filter(!is.na(log_freq))
span_model  <- read_rds(here("corpus_data", "models", "span_model_bayes.RDS"))
span_data <- read.csv(here("corpus_data", "tidy", "span_tidy.csv"))
library(here)
library(here)
library(readr)
library(here)
library(readr)
library(here)
span_data <- read.csv(here("corpus_data", "tidy", "span_tidy.csv")) %>%
filter(!is.na(log_freq))
library(tidyverse)
span_data <- read.csv(here("corpus_data", "tidy", "span_tidy.csv")) %>%
filter(!is.na(log_freq))
span_model  <- read_rds(here("corpus_data", "models", "span_model_bayes.RDS"))
hist(span_data$rate)
hist(span_data$length)
y <- span_data %>%
filter(length = 5) %>%
filter(rate < 7)
y <- span_data %>%
filter(length = 5)
y <- span_data %>%
filter(length == 5) %>%
filter(rate < 7)
View(y)
y <- span_data %>%
filter(length == 5) %>%
filter(rate < 7 & rate > 8)
y <- span_data %>%
filter(length == 5) %>%
filter(rate > 7 & rate < 8)
mod <- lmer(duration ~ log_freq + 1 | word), data = y)
mod <- lmer(duration ~ log_freq + (1 | word), data = y)
mod <- lmer(duration ~ log_freq + (1 | word), data = y)
summary(mod)
y %>%
ggplot(aes(x = duration, y = log_freq)) + geom_smooth()
y %>%
ggplot(aes(x = duration, y = log_freq)) + geom_smooth() + geom_point()
y %>%
ggplot(aes(x = log_freq, y = duration)) + geom_smooth() + geom_point()
y <- span_data %>%
filter(length == 6) %>%
filter(rate > 7 & rate < 8)
mod <- lmer(duration ~ log_freq + (1 | word), data = y)
summary(mod)
y %>%
ggplot(aes(x = log_freq, y = duration)) + geom_smooth() + geom_point()
y <- span_data %>%
filter(length == 8) %>%
filter(rate > 7 & rate < 8)
mod <- lmer(duration ~ log_freq + (1 | word), data = y)
summary(mod)
y %>%
ggplot(aes(x = log_freq, y = duration)) + geom_smooth() + geom_point()
y <- span_data %>%
filter(length == 4) %>%
filter(rate > 7 & rate < 8)
mod <- lmer(duration ~ log_freq + (1 | word), data = y)
summary(mod)
y %>%
ggplot(aes(x = log_freq, y = duration)) + geom_smooth() + geom_point()
lme4(duration ~ 1, data = span_data)
lmer(duration ~ 1, data = span_data)
lmer(duration ~ 1, data = span_data)
lmer(duration ~ 1 + ( 1 | word), data = span_data)
anova
help()
mod0 <- lmer(duration ~ 1 + ( 1 | word), data = span_data)
mod1 <- lmer(duration ~ log_freq + ( 1 | word), data = span_data)
mod2 <- lmer(duration ~ log_freq + rate + ( 1 | word), data = span_data)
mod3 <- lmer(duration ~ log_freq + rate + length + ( 1 | word), data = span_data)
anova(mod0, mod1, mod2, mod3)
mod0 <- glm(duration ~ 1, data = span_data)
mod1 <- glm(duration ~ log_freq, data = span_data)
mod2 <- glm(duration ~ log_freq + rate, data = span_data)
mod3 <- glm(duration ~ log_freq + rate + length, data = span_data)
anova(mod0, mod1, mod2, mod3)
mod1 <- glm(duration ~ log_freq, data = span_data)
summary(mod2)
mod1 <- glm(duration ~ log_freq, data = span_data)
mod0 <- lm(duration ~ 1, data = span_data)
mod1 <- lm(duration ~ log_freq, data = span_data)
mod2 <- lm(duration ~ log_freq + rate, data = span_data)
mod3 <- lm(duration ~ log_freq + rate + length, data = span_data)
summary(mod2)
anova(mod0, mod1, mod2, mod3)
mod1 <- lm(duration ~ log_freq, data = span_data)
summary(mod2)
summary(mod2) %>%
as.data.frame()
summary(mod2) %>%
as.tibble()
mod2 <- summary(mod2) %>%
as.tibble()
summary(mod1)
summary(mod2)
summary(mod3)
mod0 <- lm(duration ~ 1, data = span_data)
summary(mod1)
mod1 <- lm(duration ~ log_freq, data = span_data)
mod2 <- lm(duration ~ log_freq + rate, data = span_data)
mod4 <- lmer(duration ~ log_freq*rate*length + ( 1 | word), data = span_data)
summary(mod4)
mod4 <- lmer(duration ~ log_freq*rate*length + ( 1 | word), data = span_data)
summary(mod4)
mod0 <- lmer(duration ~ 1 + ( 1 | word), data = span_data)
mod1 <- lmer(duration ~ log_freq + ( 1 | word), data = span_data)
mod2 <- lmer(duration ~ log_freq + rate + ( 1 | word), data = span_data)
mod3 <- lmer(duration ~ log_freq + rate + length + ( 1 | word), data = span_data)
mod4 <- lmer(duration ~ log_freq + rate*length + ( 1 | word), data = span_data)
summary(mod4)
anova(mod0, mod1, mod2, mod3, mod4)
mod0 <- lmer(duration ~ 1 + ( 1 | word), data = span_data)
mod1 <- lmer(duration ~ log_freq + ( 1 | word), data = span_data)
mod2 <- lmer(duration ~ log_freq + rate + ( 1 | word), data = span_data)
mod3 <- lmer(duration ~ log_freq + rate + length + ( 1 | word), data = span_data)
mod4 <- lmer(duration ~ log_freq*rate*length + ( 1 | word), data = span_data)
summary(mod4)
anova(mod0, mod1, mod2, mod3, mod4)
mod1 <- lmer(duration ~ log_freq + ( 1 | word), data = span_data)
mod1 <- brm(duration ~ log_freq + ( 1 | word), data = span_data)
mod1 <- brms::brm(duration ~ log_freq + ( 1 | word), data = span_data)
fixef(mod1)
anova(mod0, mod1, mod2, mod3, mod4)
anova(mod0, mod1, mod2, mod3)
mod0 <- lmer(duration ~ 1 + ( 1 | word), data = span_data)
summary(mod0)
mod1 <- lmer(duration ~ log_freq + ( 1 | word), data = span_data)
anova(mod0, mod1)
mod2 <- lmer(duration ~ log_freq + rate + ( 1 | word), data = span_data)
anova(mod0, mod1, mod2)
mod3 <- lmer(duration ~ log_freq + rate + length + ( 1 | word), data = span_data)
summary(mod3)
mod1 <- brms::brm(duration ~ log_freq + ( 1 | word), data = span_data)
fixef(mod1)
conditional_effects(mod1)
brms::conditional_effects(mod1)
brms::conditional_effects(mod1)
1 + 1
brms::conditional_effects(mod1)
mod1 <- brms::brm(duration ~ log_freq + rate + length + ( 1 | word), data = span_data)
fixef(mod1)
brms::conditional_effects(mod1)
library(here)
library(readr)
library(tidyverse)
library(brms)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(bayestestR)
# spanish plot
span_data %>%
ggplot(., aes(x = log_freq, y = duration, color = length)) +
geom_point(pch = 20) + geom_smooth()
#geom_abline(data = sample_n(span_post, 4000),
# aes(intercept = int2, slope = b), color = "grey80", alpha = 0.5) +
#geom_abline(intercept = fixef(span_model)[1, 1], slope = fixef(span_model)[2, 1],
# color = "darkred", size = 1.5) + ylim(0,1) + xlab("Log Frequency") + ylab("Duration (ms)")
eng_data %>%
ggplot(., aes(x = log_freq, y = duration, color = length, shape = rate)) +
geom_point(pch = 20) +
geom_abline(intercept = y_int_e, slope = fixef(eng_model)[2, 1],
color = "darkred", size = 1.5) + xlab("Log Frequency") + ylab("Duration (ms)")
n = 100
n = 100
# 01 helpers
# function to add a single word given xmin and xmax of textgrid dfs
add_word = function(x_min, x_max, df)
{
# subset
df <- df %>% filter(x_min <= xmin & x_max >= xmax)
# mutate
df$word <- df$text[1]
# bind
return(df)
}
# using 'add_word' function, apply it to all words in df
add_words <- function(df)
{
new_df <- character()
# subset words
word_df <-  df %>%
filter(tier_name == "ORT-MAU")
# setup loop
for(thisRun in 1:nrow(word_df))
{
df_n <- add_word(word_df$xmin[thisRun], word_df$xmax[thisRun], df)
new_df <- rbind(new_df, df_n)
}
return(new_df)
}
# load libraries ---------------------------
library("tidyverse")
library("papaja")
library("knitr")
library("here")
library("dplyr")
library("ggplot2")
library("magick")
library("webshot")
library("kableExtra")
library(lme4)
library(lmerTest)
library(psych)
# ------------------------------------------
list_of_files <- list.files(path = "corpus_data/es_ar_female", recursive = TRUE,
pattern = "\\.TextGrid$",
full.names = TRUE) %>%
as.data.frame()
df_f <- character()
for(thisRun in 1:nrow(list_of_files))
{
df <- read_textgrid(list_of_files$.[thisRun]) %>%
add_words()
df_f <- rbind(df_f, df)
}
library(readtextgrid)
list_of_files <- list.files(path = "corpus_data/es_ar_female", recursive = TRUE,
pattern = "\\.TextGrid$",
full.names = TRUE) %>%
as.data.frame()
df_f <- character()
for(thisRun in 1:nrow(list_of_files))
{
df <- read_textgrid(list_of_files$.[thisRun]) %>%
add_words()
df_f <- rbind(df_f, df)
}
View(df_f)
# create rough estimate of speech rate of segments/second
df_f <- df_f %>%
group_by(file) %>%
mutate(rate = max(annotation_num)/tier_xmax)
f_data <- read.csv(here("corpus_data", "tidy", "female_tidy.csv"))
# clean up words and detect "ado" participles
f_data$word <- gsub('[[:punct:] ]+',' ',f_data$word)
f_data$word <- tolower(f_data$word)
f_data$word <- trimws(f_data$word)
corpus <- read.csv(here("lexicalfrequencydata", "subtlex_tidy.csv"))
words_df <- left_join(f_data, corpus, by = "word") %>%
mutate("duration" = xmax - xmin)
merge_df <- words_df %>%
filter(tier_name == "ORT-MAU") %>%
filter(!word == "") %>%
mutate(length = nchar(word)) %>%
filter(length == 4:8)
mod <- lmer(duration ~ log_freq + rate + length + (1 | word), data = merge_df)
fixef(mod)
